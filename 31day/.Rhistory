die <- 1:6
die - 1
die/2
die * die
dice <- sample(die, size = 2, replace = TRUE)
dice
dice
dice
roll2 <- function(bones=1:6){}
roll2 <- function(bones=1:6){
dice <- sample(bones, size=2, replace=T)
sum(dice)
}
roll2()
roll2()
roll2()
roll2()
roll2()
install.packages("ggplot2")
library("ggplot2")
qplot
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
y <- x ^ 3
y
qplot(x, y)
x<-c(1,2,2,2,3,3)
qplot(x, binwidth = 1)
x2<-c(1,1,1,1,1,2,2,2,2,3,3,4) qplot(x2, binwidth = 1)
qplot(x2, binwidth = 1)
qplot(x2, binwidth = 1)
x2<-c(1,1,1,1,1,2,2,2,2,3,3,4) qplot(x2, binwidth = 1)
qplot(x2, binwidth = 1)
x2<-c(1,1,1,1,1,2,2,2,2,3,3,4)
qplot(x2, binwidth = 1)
replicate(3, 1 + 2)
roll()
roll <- function(die=1:6){
dice <- sample(die, size=2, replace=T)
sum(dice)
}
roll()
rolls <- replicate(1000, roll())
qplot(rolls, binwidth=1)
rolls <- replicate(10000, roll())
qplot(rolls, binwidth=1)
rolls <- replicate(10000, LoadedRoll())
qplot(rolls, binwidth=1)
LoadedRoll <- function(die=1:6){
dice <- sample(die, size=2, replace=T, prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
sum(dice)
}
rolls <- replicate(10000, LoadedRoll())
qplot(rolls, binwidth=1)
update.packages(c("ggplot2", "reshape2", "dplyr"))
sum1 <- function(a, b){
a + b
}
sum1(3, 4)
sum1 <- function(a, b){
s <- a + b
}
sum1(3, 4)
sum1 <- function(a, b){
s <- a + b
s
}
sum1(3, 4)
sum1 <- function(a, b){
s <- a + b
s
}
sum2 <- function(a, b){
a + b
}
sum1(3, 4)
sum2(3, 4)
Sum1 <- function(a, b){
s <- a + b
s
}
Sum2 <- function(a, b){
a + b
}
Sum1(3, 4)
Sum2(3, 4)
Sum1 <- function(a, b){
s <- a + b
s
}
Sum2 <- function(a, b){
a + b
}
Sum1(3, 4)
Sum2(3, 4)
Sum1 <- function(a, b){
print(a)
s <- a + b
s
}
Sum2 <- function(a, b){
print(a)
a + b
}
Sum1(3, 4)
Sum2(3, 4)
Sum1(b = 3, a = 4)
Sum2(a=6)
Sum2 <- function(a, b = 0){
print(a)
a + b
}
Sum2(a=6)
tot <- function(a, b, c = avg){
avg = (a + b)/2
a + b + c
}
tot(2, 4)
totavg <- function(a, b){
tot <- a + b
avg <- (a + b)/2
return tot, avg
}
totavg <- function(a, b){
tot <- a + b
avg <- (a + b)/2
return (list(tot, avg))
}
totavg(2, 4)
totavg <- function(a, b){
tot <- a + b
avg <- (a + b)/2
return (list(total = tot, average = avg))
}
totavg(2, 4)
totavg
formals(totavg)
body(totavg)
do.call(totavg, list(3,4))
testf <- function(temp){
if (temp > 90) {
print(paste("Temperature is ", temp, "Its hot!"))
} else if (temp > 65){
print(paste("Temperature is ", temp, "Its pleasant!"))
} else {
print(paste("Temperature is ", temp, "Its cold!"))
}
}
testf(95)
testf(75)
testf(55)
scores <- c(76, 80, 59, 65)
ifelse(scores > 75, "Good", "OK")
ifelse(scores > 75, c("Good", "Wallah"), c("OK", "Hmm"))
scores <- c(76, 80, 59, 65, NA, 78)
ifelse(scores > 75, "Good", "OK")
ifelse(scores > 75, c("Good", "Wallah"), c("OK", "Hmm"))
count <- 0
repeat {
count <- count + 1
print(paste("Loop: ", count))
if (count > 1000) break
}
count <- 0
repeat {
count <- count + 1
print(paste("Loop: ", count))
if (count >= 1000) break
}
while (count < 2000){
print(count)
count <- count + 1
}
for (count in 88:99){
print(count)
count <- count + 1
}
m <- matrix(1:9, ncol=3, byrow=T)
m
apply(m, 1, sum)
m <- matrix(1:9, ncol=3)
m
apply(m, 1, sum)
apply(m, 2, sum)
apply(m, 1:2, sum)
apply(m, 2, max)
apply(m, 1, max)
apply(m, 1:2, function(x) x + 3)
packages <- installed.packages()
View(packages)
search()
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install.packages(c("boot", "codetools", "foreign", "manipulate", "MASS", "Matrix", "mgcv", "nlme"))
getwd()
setwd("/Users/agilesense/gocode/src/github.com/rafidude/100DaysOfCode/31days")
setwd("/Users/agilesense/gocode/src/github.com/rafidude/100DaysOfCode/31day")
getwd()
?read.table
read.table("sample.txt", header=T, skip=1, sep=";")
read.table("sample.txt", header=T, skip=1, sep=";")
na <- read.table("sample.txt", header=T, skip=1, sep=";")
View(na)
na <- read.table("sample.txt", header=T, skip=1, sep=";", colClasses=c("character", "integer"))
na
install.packages("XLConnect")
load("XLConnect")
library(XLConnect)
readWorksheetFromFile("a.xlsx", sheet="aa")
readWorksheetFromFile("100d.xlsx", sheet="aa")
tt <- readWorksheetFromFile("100d.xlsx", sheet=1)
View(tt)
str(tt)
tt[,c(1,2,6)]
tt[1:5,c(1,2,6)]
d100 = tt[1:5,c(1,2,6)]
str(d100)
help(package="foreign")
library(datasets)
data(package="datasets")
data(iris)
str(iris)
iris$Sepal.Length
range(iris$Sepal.Length)
diff(iris$Sepal.Length)
diff(range(iris$Sepal.Length))
summary(iris$Sepal.Length)
summary(iris)
boxplot(iris$Sepal.Length)
boxplot(iris[1:4])
library(psych)
describeby(iris, group=iris$Species)
library(psych)
describeby(iris, group=iris$Species)
install.packages("psych", "lattice")
install.packages("psych")
library(psych)
describeby(iris, group=iris$Species)
describeBy(iris, group=iris$Species)
library(lattice)
histogram(~Sepal.Length|Species, data=iris, layout=c(1,3), col="black")
boxplot(Sepal.Length ~ Species, data = iris)
mean <- 10.0
sd <- 20.0
beg.balance <- 550000
years.retirement <- 25
inflation <- 2.5/100
withdrawal <- 20000
simulations <- 1000
k <- 0
pr <- rep(NA, 11)
withdrawals <- seq(withdrawal - 5000, withdrawal + 5000, 1000)
for (wd in withdrawals){
ending.balance <- rep(NA, simulations)
for (j in 1:simulations) {
bal <- beg.balance
norm <- rnorm(years.retirement)
for (i in 1:years.retirement) {
ret <- (mean + norm[i] * sd)/100
bal <- bal*(1 + ret) - wd*((1 + inflation)**i)
}
ending.balance[j] <- bal
}
k = k + 1
pr[k] = length(ending.balance[ending.balance > 0])/1000
}
df = data.frame(wds = withdrawals, probs = pr)
plot(df$wds, df$probs)
RunMonteCarloSimulations = function(portfolio.mean = 10.0, portfolio.sd = 20.0,
beg.balance = 550000, years.retirement = 25,
inflation = 2.5/100, withdrawal = 20000,
simulations = 1000){
ending.balance <- rep(NA, simulations)
for (j in 1:simulations) {
bal <- beg.balance
norm <- rnorm(years.retirement)
for (i in 1:years.retirement) {
ret <- (portfolio.mean + norm[i] * portfolio.sd)/100
bal <- bal*(1 + ret) - wd*((1 + inflation)**i)
}
ending.balance[j] <- bal
}
ending.balance
}
WithdrawalProbabilities = function(withdrawal.start=15000, withdrawal.end=25000, withdrawal.increment=500){
k <- 0
withdrawals <- seq(withdrawal.start, withdrawal.end, withdrawal.increment)
pr <- rep(NA, length(withdrawals))
for (wd in withdrawals){
ending.balance <- RunMonteCarloSimulations(withdrawal = wd)
k <- k + 1
pr[k] <- length(ending.balance[ending.balance > 0])/1000
}
df <- data.frame(wds = withdrawals, probs = pr)
plot(df$wds, df$probs)
}
WithdrawalProbabilities()
WithdrawalProbabilities()
WithdrawalProbabilities()
RunMonteCarloSimulations = function(portfolio.mean = 10.0, portfolio.sd = 20.0,
beg.balance = 550000, years.retirement = 25,
inflation = 2.5, withdrawal = 20000,
simulations = 1000){
ending.balance <- rep(NA, simulations)
for (j in 1:simulations) {
bal <- beg.balance
norm <- rnorm(years.retirement)
for (i in 1:years.retirement) {
ret <- (portfolio.mean + norm[i] * portfolio.sd)/100
bal <- bal*(1 + ret) - wd*((1 + inflation/100)**i)
}
ending.balance[j] <- bal
}
ending.balance
}
WithdrawalProbabilities = function(withdrawal.start=15000, withdrawal.end=25000, withdrawal.increment=1000){
k <- 0
withdrawals <- seq(withdrawal.start, withdrawal.end, withdrawal.increment)
pr <- rep(NA, length(withdrawals))
for (wd in withdrawals){
ending.balance <- RunMonteCarloSimulations(withdrawal = wd)
k <- k + 1
pr[k] <- length(ending.balance[ending.balance > 0])/1000
}
df <- data.frame(wds = withdrawals, probs = pr)
plot(df$wds, df$probs)
}
WithdrawalProbabilities()
mean <- 10.0
sd <- 20.0
beg.balance <- 550000
years.retirement <- 25
inflation <- 2.5/100
withdrawal <- 20000
simulations <- 1000
k <- 0
pr <- rep(NA, 11)
withdrawals <- seq(withdrawal - 5000, withdrawal + 5000, 1000)
for (wd in withdrawals){
ending.balance <- rep(NA, simulations)
for (j in 1:simulations) {
bal <- beg.balance
norm <- rnorm(years.retirement)
for (i in 1:years.retirement) {
ret <- (mean + norm[i] * sd)/100
bal <- bal*(1 + ret) - wd*((1 + inflation)**i)
}
ending.balance[j] <- bal
}
k = k + 1
pr[k] = length(ending.balance[ending.balance > 0])/1000
}
df = data.frame(wds = withdrawals, probs = pr)
plot(df$wds, df$probs)
RunMonteCarloSimulations = function(portfolio.mean = 10.0, portfolio.sd = 20.0,
beg.balance = 550000, years.retirement = 25,
inflation = 2.5, withdrawal = 20000,
simulations = 1000){
ending.balance <- rep(NA, simulations)
for (j in 1:simulations) {
bal <- beg.balance
norm <- rnorm(years.retirement)
for (i in 1:years.retirement) {
ret <- (portfolio.mean + norm[i] * portfolio.sd)/100
bal <- bal*(1 + ret) - wd*((1 + inflation/100)**i)
}
ending.balance[j] <- bal
}
prob <- length(ending.balance[ending.balance > 0])/1000
prob
}
WithdrawalProbabilities = function(withdrawal.start=15000, withdrawal.end=25000, withdrawal.increment=1000){
k <- 0
withdrawals <- seq(withdrawal.start, withdrawal.end, withdrawal.increment)
pr <- rep(NA, length(withdrawals))
for (wd in withdrawals){
prob <- RunMonteCarloSimulations(withdrawal = wd)
k <- k + 1
pr[k] <- prob
}
df <- data.frame(wds = withdrawals, probs = pr)
print(df)
plot(df$wds, df$probs)
}
WithdrawalProbabilities()
RunMonteCarloSimulations = function(portfolio.mean = 10.0, portfolio.sd = 20.0,
beg.balance = 550000, years.retirement = 25,
inflation = 2.5, withdrawal = 20000,
simulations = 1000){
ending.balance <- rep(NA, simulations)
for (j in 1:simulations) {
bal <- beg.balance
norm <- rnorm(years.retirement)
for (i in 1:years.retirement) {
ret <- (portfolio.mean + norm[i] * portfolio.sd)/100
bal <- bal*(1 + ret) - wd*((1 + inflation/100)**i)
}
ending.balance[j] <- bal
}
prob <- length(ending.balance[ending.balance > 0])/1000
prob
}
WithdrawalProbabilities = function(withdrawal.start=15000, withdrawal.end=25000, withdrawal.increment=1000){
k <- 0
withdrawals <- seq(withdrawal.start, withdrawal.end, withdrawal.increment)
pr <- rep(NA, length(withdrawals))
for (wd in withdrawals){
prob <- RunMonteCarloSimulations(withdrawal = wd)
k <- k + 1
pr[k] <- prob
}
df <- data.frame(wds = withdrawals, probs = pr)
print(df)
plot(df$wds, df$probs)
}
WithdrawalProbabilities()
mean <- 10.0
sd <- 20.0
beg.balance <- 550000
years.retirement <- 25
inflation <- 2.5/100
withdrawal <- 20000
simulations <- 1000
k <- 0
pr <- rep(NA, 11)
withdrawals <- seq(withdrawal - 5000, withdrawal + 5000, 1000)
for (wd in withdrawals){
ending.balance <- rep(NA, simulations)
for (j in 1:simulations) {
bal <- beg.balance
norm <- rnorm(years.retirement)
for (i in 1:years.retirement) {
ret <- (mean + norm[i] * sd)/100
bal <- bal*(1 + ret) - wd*((1 + inflation)**i)
}
ending.balance[j] <- bal
}
k = k + 1
pr[k] = length(ending.balance[ending.balance > 0])/1000
}
df = data.frame(wds = withdrawals, probs = pr)
plot(df$wds, df$probs)
