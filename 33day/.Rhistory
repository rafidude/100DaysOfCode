die <- 1:6
die - 1
die/2
die * die
dice <- sample(die, size = 2, replace = TRUE)
dice
dice
dice
roll2 <- function(bones=1:6){}
roll2 <- function(bones=1:6){
dice <- sample(bones, size=2, replace=T)
sum(dice)
}
roll2()
roll2()
roll2()
roll2()
roll2()
install.packages("ggplot2")
library("ggplot2")
qplot
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
y <- x ^ 3
y
qplot(x, y)
x<-c(1,2,2,2,3,3)
qplot(x, binwidth = 1)
x2<-c(1,1,1,1,1,2,2,2,2,3,3,4) qplot(x2, binwidth = 1)
qplot(x2, binwidth = 1)
qplot(x2, binwidth = 1)
x2<-c(1,1,1,1,1,2,2,2,2,3,3,4) qplot(x2, binwidth = 1)
qplot(x2, binwidth = 1)
x2<-c(1,1,1,1,1,2,2,2,2,3,3,4)
qplot(x2, binwidth = 1)
replicate(3, 1 + 2)
roll()
roll <- function(die=1:6){
dice <- sample(die, size=2, replace=T)
sum(dice)
}
roll()
rolls <- replicate(1000, roll())
qplot(rolls, binwidth=1)
rolls <- replicate(10000, roll())
qplot(rolls, binwidth=1)
rolls <- replicate(10000, LoadedRoll())
qplot(rolls, binwidth=1)
LoadedRoll <- function(die=1:6){
dice <- sample(die, size=2, replace=T, prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
sum(dice)
}
rolls <- replicate(10000, LoadedRoll())
qplot(rolls, binwidth=1)
update.packages(c("ggplot2", "reshape2", "dplyr"))
intall.packages("lubridate", "plyr", "reshape2")
install.packages("lubridate", "plyr", "reshape2")
install.packages("lubridate", "reshape2")
install.packages("lubridate")
2
install.packages("sqldf")
library(sqldf)
sqldf("SELECT
day
, avg(temp) as avg_temp
FROM beaver2
GROUP BY
day;")
head(beaver2)
beavers <- sqldf("select * from beaver1
union all
select * from beaver2;")
head(beavers)
movies <- data.frame(
title=c("The Great Outdoors", "Caddyshack", "Fletch", "Days of Thunder", "Crazy Heart"),
year=c(1988, 1980, 1985, 1990, 2009)
)
boxoffice <- data.frame(
title=c("The Great Outdoors", "Caddyshack", "Fletch", "Days of Thunder","Top Gun"),
revenue=c(43455230, 39846344, 59600000, 157920733, 353816701)
)
sqldf("SELECT
m.*
, b.revenue
FROM
movies m
INNER JOIN
boxoffice b
ON m.title = b.title;")
install.packages("forecast")
library(forecast)
fit <- auto.arima(mdeaths)
head(mdeaths)
forecast(fit, level=c(80, 95, 99), h=3)
plot(forecast(fit), shadecols="oldstyle")
library(plyr)
ddply(iris, .(Species), summarise,
mean_petal_length=mean(Petal.Length)
)
unlist(daply(iris[,4:5], .(Species), colwise(mean)))
daply(iris[,4:5], .(Species), colwise(mean))
unlist(daply(iris[,4:5], .(Species), colwise(mean)))
install.packages("stringr")
library(stringr)
names(iris)
names(iris) <- str_replace_all(names(iris), "[.]", "_")
names(iris)
s <- c("Go to Heaven for the climate, Hell for the company.")
str_extract_all(s, "[H][a-z]+ ")
library(lubridate)
year("2012-12-12")
day("2012-12-12")
ymd("2012-12-12")
library(reshape2)
iris$id <- 1:nrow(iris)
head(iris)
iris.lng <- melt(iris, id=c("id", "Species"))
iris.lng
head(iris.lng)
iris.wide <- dcast(iris.lng, id + Species ~ variable)
head(iris.wide)
library(ggplot2)
p <- ggplot(aes(x=value, fill=Species), data=iris.lng)
p + geom_histogram() +
facet_wrap(~variable, scales="free")
library(randomForest)
install.packages("randomForest")
library(randomForest)
data <- read.table("http://math.ucdenver.edu/RTutorial/titanic.txt", h=T, sep="\t")
data$Survived <- as.factor(ifelse(data$Survived==1, "yes", "no"))
idx <- runif(nrow(data)) <= .75
head(idx)
nrow(data)
data.train <- data[idx,]
data.test <- data[-idx,]
rf <- randomForest(Survived ~ PClass + Age + Sex, data=data.train, importance=TRUE, na.action=na.omit)
imp <- importance(rf)
o <- order(imp[,3], decreasing=T)
imp[o,]
table(data.test$Survived, predict(rf, data.test), dnn=list("actual", "predicted"))
vehicles <- read.csv(unz("vehicles.csv.zip", "vehicles.csv"), stringsAsFactors = F)
getwd()
setwd("/Users/agilesense/gocode/src/github.com/rafidude/100DaysOfCode/31day")
vehicles <- read.csv(unz("vehicles.csv.zip", "vehicles.csv"), stringsAsFactors = F)
getwd()
setwd("/Users/agilesense/gocode/src/github.com/rafidude/100DaysOfCode/33day")
getwd()
vehicles <- read.csv(unz("vehicles.csv.zip", "vehicles.csv"), stringsAsFactors = F)
View(vehicles)
head(vehicles)
nrow(vehicles)
ncol(vehicles)
names(vehicles)
head(vehicles[c("mpgData", "make", "model")])
unique(vehicles[,"year"])
table(vehicles$fuelType1)
vehicles$trany <- as.factor(vehicles$trany)
tables(vehicles$trany)
table(vehicles$trany)
table(vehicles$trany2)
set.seed(1234) # setting seed to reproduce the example
numvar <- rnorm(100)
num2factor <- cut(numvar,breaks=5)
class(num2factor)
levels(num2factor)
num2factor
table(num2factor)
levels(num2factor)
iris.set <- iris[iris$Species=="setosa",-5]
iris.versi <- iris[iris$Species=="versicolor",-5]
iris.virg <- iris[iris$Species=="virginica",-5]
iris.set <- iris[iris$Species=="setosa",-5]iris.versi <- iris[iris$Species=="versicolor",-5]iris.virg <- iris[iris$Species=="virginica",-5]
iris.set <- iris[iris$Species=="setosa",-5]
iris.versi <- iris[iris$Species=="versicolor",-5]
iris.virg <- iris[iris$Species=="virginica",-5]
mean.set <- colMeans(iris.set)
mean.set
mean.versi <- colMeans(iris.versi)
mean.virg <- colMeans(iris.virg)
mean.iris <- rbind(mean.set,mean.versi,mean.virg)
mean.iris
rownames(mean.iris) <- c("setosa","versicolor","virginica")
mean.iris
mean.iris.loop <- NULL
for(species in unique(iris$Species)){  iris_sub <- iris[iris$Species==species,]  column_means <- colMeans(iris_sub[,-5])  mean.iris.loop <- rbind(mean.iris.loop,column_means)}
for(species in unique(iris$Species))
{
iris_sub <- iris[iris$Species==species,]
column_means <- colMeans(iris_sub[,-5])
mean.iris.loop <- rbind(mean.iris.loop,column_means)
}
mean.iris.loop
rownames(mean.iris.loop) <- unique(iris$Species)
mean.iris.loop
library (plyr)
ddply(iris,~Species,function(x) colMeans(x[,-which(colnames(x)=="Species")]))
head(iris3)
dim(iris3)
iris_mean <- adply(iris3,3,colMeans)
iris_mean
iris_mean <- aaply(iris3,3,colMeans)
iris_mean
iris_mean <- adply(iris3,3,colMeans)
iris_mean
all_stats <- alply(iris3,3,fivenum.summary)
all_stats <- alply(iris3,3,summary)
all_stats
library(sqldf)
subiris<- sqldf("select * from iris where Sepal_Width> 3")
subiris<- sqldf("select * from iris where Sepal.Width> 3")
head(iris)
subiris<- sqldf("select * from iris where Sepal.Width> 3")
head(iris)
names(iris)
subiris<- sqldf("select * from iris where Sepal.Width > 3")
library(sqldf)
iris$SW = iris$Sepal.Width
subiris<- sqldf("select * from iris where SW > 3")
head(subiris)
