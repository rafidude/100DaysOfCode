library(SDSFoundations)
bull <- BullRiders
View(bull)
year = bull$YearBorn - 2013
year = 2013 - bull$YearBorn
t.test(year, mu=30)
t.test(year, mu=29)
t.test(year, mu=28)
t.test(year, mu=27)
t.test(year, mu=26)
t.test(year, mu=27.5)
t.test(year, mu=27.57)
hist(year)
hist(bull$Weight)
sd(bull$Weight)
mean(bull$Weight)
t.test(bull$Weight, mu=190)
library(SDSFoundations)
post <- PostSurvey
View(post)
post10 = post[1:10]
post10$live_campus
View(post10)
post10 = post[1:10,]
post10$live_campus
table(post10$live_campus)
under = post$happy[post$classification=='Freshman'|post$classification=='Sophomore']
upper = post$happy[post$classification=='Junior'|post$classification=='Senior']
hist(under)
hist(upper)
t.test(under, upper)
post$diff_happy <- post$happy - post$post_happy
hist(post$diff_happy, xlab= 'Difference in Happiness over the Semester', main = 'Happy-Post Happy')
t.test(post$happy, post$post_happy, paired=T)
mean(under)
mean(upper)
t.test(under, upper)
mean(post$diff)
t.test(post$happy, post$post_happy, paired=T)
hist(under)
hist(upper)
hist(post$diff_happy, xlab= 'Difference in Happiness over the Semester', main = 'Happy-Post Happy')
mean = 5
s = 2
n = 50
err = qnorm(0.975)
err = qnorm(0.975)*s/sqrt(n)
left = mean - err
right = mean + err
n = 20
err = qnorm(0.975)*s/sqrt(n)
left = mean - err
right = mean + err
mean = 5
s = 2
n = 20
err = qt(0.975, df=n-1)*s/sqrt(n)
left = mean - err
right = mean + err
w1 <- read.csv(file=f,sep=",",head=TRUE)
f = "/Users/agilesense/gocode/src/github.com/rafidude/100DaysOfCode/23day/w1.dat"
w1 <- read.csv(file=f,sep=",",head=TRUE)
summary(w1)
hist(w1)
hist(w1$vals)
error <- qt(0.975,df=length(w1$vals)-1)*sd(w1$vals)/sqrt(length(w1$vals))
mean(w1$vals)
left <- mean(w1$vals)-error
right <- mean(w1$vals)+error
mean(w1$vals)
f = file.choose()
f
smokerData <- read.csv(file=f,sep=',',header=T)
summary(smokerData)
View(smokerData)
mosaicplot(smoke)
mosaicplot(smokerData)
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
colnames(o) <- c("High","Low","Middle")
colnames(smoke) <- c("High","Low","Middle")
smoke
rownames(o) <- c("current","former","never")
smoke
rownames(o) <- c("current","former","never")
rownames(smoke) <- c("current","former","never")
smoke
smoket <- as.table(smoke)
smoket
barplot(smoke,legend=T,beside=T,main='Smoking Status by SES')
barplot(smoket,legend=T,beside=T,main='Smoking Status by SES')
plot(smoke,main="Smoking Status By Socioeconomic Status")
class(smoke)
class(smoket)
barplot(smoket,legend=T,beside=T,main='Smoking Status by SES')
plot(smoket,main="Smoking Status By Socioeconomic Status")
smoket
margin.table(smoket)
smoket/margin.table(smoket)
prop.table(smoket)
prop.table(smoket,1)
prop.table(smoket,2)
summary(smoket)
help(mosaicplot)
smoke <- table(smokerData$Smoke,smokerData$SES)
mosaicplot(smoke)
mosaicplot(smoke,main="Smokers",xlab="Status",ylab="Economic Class")
a <- data.frame(one=c( 0, 1, 2),two=c("a","a","b"))
a <- data.frame(one=c( 0, 1, 2),two=c("a","a","b"))
a
b <- data.frame(one=c(10,11,12),two=c("c","c","d"))
b
a <- data.frame(one=c( 0, 1, 2),two=c("a","a","b"))
a
b <- data.frame(one=c(10,11,12),two=c("c","c","d"))
b
v <- rbind(a,b)
v
typeof(a)
typeof(b)
typeof(v)
w <- cbind(a,b)
w
names(w) = c("one","two","three","four")
w
w$two
w$three
A = matrix(c( 1, 2, 3, 4, 5, 6),ncol=3,byrow=TRUE)
A
typeof(A)
x <- list(a=rnorm(200,mean=1,sd=10),
b=rexp(300,10.0),
c=as.factor(c("a","b","b","b","c","c")))
x
lapply(x,summary)
x <- list(a=rnorm(8,mean=1,sd=10),b=rexp(10,10.0))
x
val <- lapply(x,mean)
val
other <- sapply(x,mean)
other
typeof(val)
typeof(other)
class(other)
val <- data.frame(a=c(1,2,10,20,5,50), b=as.factor(c("a","a","b","b","a","b")))
val
result <- tapply(val$a,val$b,mean)
result
typeof(result)
result <- tapply(val$a,val$b,summary)
typeof(result)
result
help(DateTimeClasses)
t <- Sys.time()
t
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/cdc.Rdata"))
names(cdc)
head(cdc)
tail(cdc)
head(cdc)
tail(cdc)
mean(cdc$weight)
var(cdc$weight)
median(cdc$weight)
summary(cdc$weight)
table(cdc$genhlth)
table(cdc$genhlth)/20000
table(cdc$smoke100)
barplot(table(cdc$smoke100))
table(cdc$gender)
gender_smokers = table(cdc$gender, cdc$smoke100)
gender_smokers
mosaicplot(gender_smokers)
tail(cdc)
?boxplot
boxplot(cdc$height)
summary(cdc$height)
boxplot(cdc$weight ~ cdc$smoke100)
bmi = (cdc$weight/cdc$height^2)*703
boxplot(bmi ~ cdc$genhlth)
hist(bmi)
hist(bmi, breaks=50)
hist(bmi, breaks=100)
plot(cdc$weight, cdc$wtdesire)
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/kobe.RData"))
head(kobe)
tail(kobe)
names(kobe)
kobe$basket[1:9]
kobe_streak = calc_streak(kobe$basket)
barplot(table(kobe_streak))
# simulate coin toss
outcomes = c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 10, replace = TRUE)
sim_fair_coin = sample(outcomes, size=100, replace=T)
sim_fair_coin
table(sim_fair_coin)
outcomes = c("heads", "tails")
sim_unfair_coin = sample(outcomes, replace=T, size=100, prob = c(0.2, 0.8))
# Print the object:
sim_unfair_coin
# Compute the counts of heads and tails:
table(sim_unfair_coin)
sim_unfair_coin = sample(outcomes, replace=T, size=100, prob = c(0.2, 0.8))
table(sim_unfair_coin)
# Run the simulation for Kobe and assign the result to 'sim_basket'.
outcomes = c("H", "M")
sim_basket = sample(outcomes, replace=T, size=133, prob=c(0.45, 0.55))
table(sim_basket)
x = c("H", "M", "M", "H", "H", "M", "M")
y <- numeric(length(x))
y = numeric(length(x))
y
y = as.numeric(x == 'H')
y
y <- c(0, y, 0)
y
wz <- which(y == 0)
wz
?diff
diff(wz)
diff(wz)-1
calc_streak <- function(x){
y <- as.numeric(x == "H")
y <- c(0, y, 0)
wz <- which(y == 0)
streak <- diff(wz) - 1
return(streak)
}
calc_streak <- function(x){
y <- as.numeric(x == "H")
y <- c(0, y, 0)
wz <- which(y == 0)
streak <- diff(wz) - 1
return(streak)
}
y = clac_streak(x)
y
y = calc_streak(x)
y
calc_streak <- function(x){
y <- as.numeric(x == "H")
y <- c(0, y, 0)
wz <- which(y == 0)
streak <- diff(wz) - 1
return(streak)
}
kobe_streak = calc_streak(kobe$basket)
sim_streak = calc_streak(sim_basket)
# Compute summaries:
summary(kobe_streak)
summary(sim_streak)
# Make bar plots:
kobe_table = table(kobe_streak)
sim_table = table(sim_streak)
kobe_table
sim_table
barplot(kobe_table)
barplot(sim_table)
